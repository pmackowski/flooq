/*
 * Copyright (c) 2011-2019 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Modifications copyright (C) 2019 Paweł Maćkowski
 */

buildscript {
    repositories {
        maven { url "http://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11',
                'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
    }
}
plugins {
    id 'org.asciidoctor.convert' version '1.5.6'
    id 'me.champeau.gradle.jmh' version '0.4.7'
}

ext {
    gradleScriptDir = "${rootProject.projectDir}/gradle"

    reactorCoreVersion = "3.2.5.RELEASE"
    reactorExtraVersion = "3.1.7.RELEASE"

    // Logging
    slf4jVersion = '1.7.25'
    logbackVersion = '1.2.3'

    // Libraries
    rabbitMqJavaClientVersion = '5.5.3'

    // Testing
    mockitoVersion = '2.23.4'
    junitPlatformVersion = '1.3.2'
    junitJupiterVersion  = '5.3.2'
    assertjVersion = '3.11.1'

    javadocLinks = ["http://docs.oracle.com/javase/7/docs/api/",
                    "http://docs.oracle.com/javaee/6/api/",
                    "http://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/",
                    "http://projectreactor.io/docs/core/release/api/",
                    "https://rabbitmq.github.io/rabbitmq-java-client/api/current/",] as String[]
}

apply from: "$gradleScriptDir/setup.gradle"
apply from: "$gradleScriptDir/doc.gradle"

configurations.all {
    // check for snapshot updates every time
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configure(allprojects) { project ->
    group = 'io.projectreactor.rabbitmq'

    repositories {
        maven { url 'http://repo.spring.io/libs-release' }
        maven { url 'http://repo.spring.io/libs-snapshot' }
        mavenCentral()
        jcenter()
    }

    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'java'

    sourceCompatibility = targetCompatibility = 1.8

    [compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:varargs",
                                                             "-Xlint:cast",
                                                             "-Xlint:classfile",
                                                             "-Xlint:dep-ann",
                                                             "-Xlint:divzero",
                                                             "-Xlint:empty",
                                                             "-Xlint:finally",
                                                             "-Xlint:overrides",
                                                             "-Xlint:path",
                                                             "-Xlint:processing",
                                                             "-Xlint:static",
                                                             "-Xlint:try",
                                                             "-Xlint:deprecation",
                                                             "-Xlint:unchecked",
                                                             "-Xlint:-serial",      // intentionally disabled
                                                             "-Xlint:-options",     // intentionally disabled
                                                             "-Xlint:-fallthrough", // intentionally disabled
                                                             "-Xlint:-rawtypes"     // TODO enable and fix warnings
    ]

    dependencies {
        compile "io.projectreactor.addons:reactor-extra:$reactorExtraVersion"
        compile "io.projectreactor:reactor-core:$reactorCoreVersion"
        compile "com.rabbitmq:amqp-client:$rabbitMqJavaClientVersion"
        compile "io.projectreactor.rabbitmq:reactor-rabbitmq:1.0.0.RELEASE"

        // Testing
        // JUnit Jupiter API and TestEngine implementation
        testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
        testCompile("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

        testCompile "io.projectreactor:reactor-test:$reactorCoreVersion"
        testCompile "org.mockito:mockito-core:$mockitoVersion"
        testCompile "org.assertj:assertj-core:${assertjVersion}"
        testRuntime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        testRuntime "org.slf4j:slf4j-api:$slf4jVersion"
        testRuntime "ch.qos.logback:logback-classic:$logbackVersion"
    }

    // force test runs even when there are no test changes
    test.outputs.upToDateWhen { false }
}

configure(rootProject) {
    archivesBaseName = 'rabbitmq-flow'
    description = 'Reactor RabbitMQ: A reactive API for RabbitMQ'

    jar {
        manifest {
            attributes("Automatic-Module-Name": "reactor.rabbitmq",
                    "Implementation-Version": version)
        }
    }

    test {
        useJUnitPlatform()
        systemProperty 'rabbitmqctl.bin', System.getProperty('rabbitmqctl.bin') ?: 'sudo rabbitmqctl'
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
        archives docsZip
    }

}

project(':rabbitmq-flow-samples') {
    archivesBaseName = 'rabbitmq-flow-samples'
    description = 'Samples for Reactor RabbitMQ'
    dependencies {
        compile rootProject
        runtime "ch.qos.logback:logback-classic:$logbackVersion"

        testCompile rootProject.sourceSets.test.output
    }

    task sample(type:JavaExec) {
        main = 'io.github.rabbitmq.flow.samples.SampleFlow'
        classpath = sourceSets.main.runtimeClasspath
    }

    task classpath {
        doLast {
            println sourceSets.main.runtimeClasspath.asPath
        }
    }

    test {
        useJUnitPlatform()
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}
